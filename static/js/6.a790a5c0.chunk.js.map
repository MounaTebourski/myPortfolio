{"version":3,"sources":["components/contact/Contact.jsx"],"names":["Contact","formRef","useRef","useState","done","setDone","useLocale","locale","isEnglish","validationSchema","Yup","shape","user_name","min","max","required","user_subject","user_email","email","className","id","name","content","src","alt","initialValues","message","onSubmit","values","console","log","emailjs","sendForm","current","then","result","text","error","errors","touched","ref","type","placeholder","as"],"mappings":"mQAUe,SAASA,IACtB,IAAMC,EAAUC,mBAChB,EAAwBC,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAGA,EAA4BC,cAA5B,mBAAOC,EAAP,KACMC,GADN,KAC6B,OAAXD,GAGZE,EAAmBC,MAAaC,MAAM,CAC1CC,UAAWF,MACPG,IAAI,EAAGL,EAAY,aAAe,eAClCM,IAAI,GAAIN,EAAY,YAAa,cACjCO,SAASP,EAAY,iBAAmB,iBACzCQ,aAAcN,MACbG,IAAI,EAAGL,EAAY,aAAe,eAClCM,IAAI,IAAKN,EAAY,YAAa,cAClCO,SAASP,EAAY,iBAAmB,iBACzCS,WAAYP,MAAaQ,MAAMV,EAAY,gBAAkB,uBAAuBO,SAASP,EAAY,iBAAmB,mBAsBjI,OACE,sBAAKW,UAAU,UAAUC,GAAG,UAA5B,UACE,eAAC,IAAD,WACE,8DACA,sBAAMC,KAAK,cAAcC,QAAQ,4CAEnC,qBAAKH,UAAU,OAAf,SACE,qBAAKI,IAAI,kBAAkBC,IAAI,OAEjC,sBAAKL,UAAU,QAAf,UACE,0CACA,cAAC,IAAD,CACAM,cAAe,CAEfb,UAAW,GACXI,aAAc,GACdE,MAAO,GACPQ,QAAQ,IAGTjB,iBAAkBA,EAClBkB,SAAU,SAAAC,GACRC,QAAQC,IAAIF,GAvChBG,IACEC,SACC,kBACA,mBACA/B,EAAQgC,QACR,qBAEDC,MACC,SAACC,GACCN,QAAQC,IAAIK,EAAOC,MACnB/B,GAAQ,MAEV,SAACgC,GACCR,QAAQC,IAAIO,EAAMD,UAepB,SAeA,gBAAGE,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACC,eAAC,IAAD,CAAMC,IAAKvC,EAAX,UACC,cAAC,IAAD,CAAOwC,KAAK,OAAOtB,UAAU,QAAQuB,YAAclC,EAAY,OAAS,MAAOa,KAAK,cAClFiB,EAAO1B,WAAa2B,EAAQ3B,UAAa,qBAAKO,UAAU,QAAf,SAAwBmB,EAAO1B,YAAoB,KAC9F,cAAC,IAAD,CAAO6B,KAAK,OAAOtB,UAAU,QAAQuB,YAAalC,EAAY,UAAY,QAASa,KAAK,iBACvFiB,EAAOtB,cAAgBuB,EAAQvB,aAAgB,qBAAKG,UAAU,QAAf,SAAwBmB,EAAOtB,eAAuB,KACtG,cAAC,IAAD,CAAOyB,KAAK,QAAQtB,UAAU,QAAQuB,YAAY,QAAQrB,KAAK,eAC9DiB,EAAOrB,YAAcsB,EAAQtB,WAAa,qBAAKE,UAAU,QAAf,SAAwBmB,EAAOrB,aAAoB,KAC9F,cAAC,IAAD,CAAO0B,GAAG,WAAWxB,UAAU,WAAYuB,YAAY,UAAUrB,KAAK,YACtE,wBAAQoB,KAAK,SAAb,SAAuBjC,EAAY,OAAS,YAC3CJ,GAAQ,iCAAM,cAAC,IAAD,CAAkBgB,GAAG,yBAA3B","file":"static/js/6.a790a5c0.chunk.js","sourcesContent":["import \"./contact.scss\";\r\nimport { useContext, useRef, useState } from \"react\";\r\nimport emailjs from '@emailjs/browser';\r\nimport { Formik, Form, Field } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Helmet } from 'react-helmet-async';\r\nimport { useLocale } from '../LocaleProvider';\r\nimport { FormattedMessage } from 'react-intl';\r\n\r\n\r\nexport default function Contact() {\r\n  const formRef = useRef();\r\n  const [done, setDone] = useState(false)\r\n  \r\n  //toggle la langue fr/en\r\n  const [locale, setLocale] = useLocale();\r\n  const isEnglish = locale === 'en';\r\n\r\n  //validation du formulaire avec Yup\r\n  const validationSchema = Yup.object().shape({\r\n    user_name: Yup.string()\r\n       .min(2, isEnglish ? 'Too Short!' : 'Trop court!')\r\n       .max(50, isEnglish ? 'Too Long!': 'Trop long!')\r\n       .required(isEnglish ? 'Required field' : 'Champs requis'),\r\n       user_subject: Yup.string()\r\n       .min(2, isEnglish ? 'Too Short!' : 'Trop court!')\r\n       .max(100, isEnglish ? 'Too Long!': 'Trop long!')\r\n       .required(isEnglish ? 'Required field' : 'Champs requis'),\r\n       user_email: Yup.string().email(isEnglish ? 'Invalid email' : 'Courriel non valide').required(isEnglish ? 'Required field' : 'Champs requis'),\r\n  });\r\n\r\n  //Envoi de contenu du formulaire vers mon gmail \r\n  const handleSubmit = () => {\r\n     emailjs\r\n      .sendForm(\r\n        \"service_da6cvyz\",\r\n        \"template_w0fr3fq\",\r\n        formRef.current,\r\n        \"Ix9IVkqC4kg-5jAVa\"\r\n      )\r\n      .then(\r\n        (result) => {\r\n          console.log(result.text);\r\n          setDone(true)\r\n        },\r\n        (error) => {\r\n          console.log(error.text);\r\n        }\r\n      );\r\n  };\r\n  return (\r\n    <div className=\"contact\" id=\"contact\">\r\n      <Helmet>\r\n        <title>Contact - Mouna Tebourski</title>\r\n        <meta name=\"description\" content=\"Page Contact pour envoyer un message\"/>\r\n    </Helmet>\r\n      <div className=\"left\">\r\n        <img src=\"assets/desk.jpg\" alt=\"\" />\r\n      </div>\r\n      <div className=\"right\">\r\n        <h2>Contact.</h2>\r\n        <Formik\r\n        initialValues={{\r\n          //initiliser les valeurs du formulaire\r\n        user_name: '',\r\n        user_subject: '',\r\n        email: '',\r\n        message:'',\r\n       }}\r\n       //Schema de validation qu'on a fais avec yup \r\n       validationSchema={validationSchema}\r\n       onSubmit={values => {\r\n         console.log(values);\r\n         handleSubmit();\r\n       }}\r\n     >\r\n       {({ errors, touched }) => (\r\n         <Form ref={formRef}>\r\n          <Field type=\"text\" className=\"field\" placeholder= {isEnglish ? \"Name\" : \"Nom\"} name=\"user_name\"/>\r\n           {errors.user_name && touched.user_name ? (<div className=\"error\">{errors.user_name}</div>) : null}\r\n          <Field type=\"text\" className=\"field\" placeholder={isEnglish ? \"Subject\" : \"Sujet\"} name=\"user_subject\" />\r\n          {errors.user_subject && touched.user_subject ? (<div className=\"error\">{errors.user_subject}</div>) : null}\r\n          <Field type=\"email\" className=\"field\" placeholder=\"Email\" name=\"user_email\" />\r\n          {errors.user_email && touched.user_email ? <div className=\"error\">{errors.user_email}</div> : null}\r\n          <Field as=\"textarea\" className=\"textarea\"  placeholder=\"Message\" name=\"message\"></Field>\r\n          <button type=\"submit\">{isEnglish ? \"Send\" : \"Envoyer\"}</button>\r\n          {done && <span><FormattedMessage id=\"app.contact.response\" />  </span>}\r\n         </Form>\r\n       )}\r\n     </Formik>\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n"],"sourceRoot":""}